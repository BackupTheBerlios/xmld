The XMLD's Socket Selector:
---------------------------
 This part is to handle listening for incoming messages
 from client sockets in a single process (not a process
 for each client socket). This is normally achieved by
 using the function select().

API:
----
 struct XMLDConnection *conn_table;
  
  Carries connection structures of each client connec-
  tion (with maximum value connection specified by the
  sosel.max_conn configuration directive)
 
 xmld_status_t sosel_init(void);

  Initializes the Socket Selector.
 
 xmld_status_t sosel_shutdown(void);

  Shutdowns the Socket Selector and frees all the used
  memory.

 xmld_status_t sosel_sadd(int fd);
 
  Marks one of the descriptors in conn_table to
  be checked by the next select() cycle.
 
 xmld_status_t sosel_sremove(int fd)
  
  Marks one of the descriptors in conn_table not to
  be checked by the next select() cycle.
 
 xmld_status_t sosel_add(int fd, char *dir);

  Creates a XMLDConnection struct with _dir_ being the
  current directory of the connection and _fd_ being the
  descriptor that represents the connection's socket, the
  method also appends the new XMLDConnection struct to
  conn_table and makes it be checkable by the next select
  cycle.

 xmld_status_t sosel_remove(int fd);

  Removes a XMLDConnection struct whose socket's descri-
  ptor is _fd_ from the conn_table and frees up the
  resources being used by it and makes it uncheckable
  within the next select() cycle.

----------------------------------------------------
