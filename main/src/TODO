--------------- Start of The OpenXMLD 0.5.0 part:

Goal: Code base stabilization and preparation for
the hard upcoming features and a slight increase 
in usability.

* If a column value contains col_sep or row_sep they
must be encoded before sending by XMLDResponse_flush.
(done)

* Implement mstrchr_replace. (done)

* cfg_parser must handle # inside values correctly,
that is, # must mean commenting only if it was at 
the beginning of the line. (done)

* somanager must close all server sockets on shutdown.
(done)

* XMLDExpr must contain a floating-point type (e.g double).
Support that in xmld-sql.(lex|y).
(done)

* Implement ftoa/ltoa (sutils.h) -- ltoa -> itoa). (done)

* Convert nval back to int. in xmld-sql.lex, xmld-sql.y
XMLDExpr. (done)

* Remove engine_xmld_get_element_text_length use
att_length with (text) instead. (done)

* Fix implementation of att_length and implement att_type.
in format_manip. (done)

* Share backend in format_manip (done).

* prepare should take one argument that specifies access
levels. (done)

* format manip's load_format_file 's last argument must
be a binary 0 no execlusive to format or 1 execlusive
to format. (done)

* All lists of numeric --> meaning association in all
structures/functions must be converted to correspon-
ding enumerations/macros. (done)

* The access level given to prepare must be defined
as macros of three bits OR'ing them gives a proper
result. (done)

* consider the macro and enumeration thing in xmld-sql.y
and twalker. (done)

* Implement bitutils.h (done)

* Add XMLD_ENOFORMAT to xmld_errors.(h/c). (done)

* All success/failure -> back to int (XMLD_SUCCESS
 and XMLD_FAILURE). (done)

* XMLDDirective now has type macros change cfg_parser
to conform. (done)

* xmld-sql.y must have its own request types defined
as macros (done)

* twalker must respect xmld-sql.y macros. (done)

* twalker prepare calls must use the access level 
bitmask. (done)

* engine_xmld_prepare doesn't use BIT_ISSET correctly
(done)

* in cfg_parser convert mode to macros (done)

* format_manip's load_format_file must return a pointer
to the opened file rather than a status indiciator
and NULL in case of failure (fix prepare to conform).
(done)

* define XMLD_TRUE, XMLD_FALSE, XMLDBool type, 
XMLD_SUCCESS, XMLD_FAILURE, XMLD_SPECIAL and 
BIT_ISSET and take all to xmlddef.h. (done)

* move contents of xmld_errors -> xmlddef (done)

* #include bitutils.h and xmld_errors.h -> 
#include xmlddef. (done)

* Use global XMLD_* macros everywhere. (done)

* If the level in question given to one of 
format_manip functions is higher than the actual
levels in the format document, the last level
must be considered infinite. Add that a level
is represented by a "<level>" element in the
format document. (done)

* The format document must support a <!>
tagname format in each level, that is -- if
no corresponding tagname was found, default
is used. (done)

* engine_xmld_get_element_att_format when
returns NULL other format manip should
return 0 or NULL as well, higher level
functions must produce an XMLD_EMALFORMAT
error. (done)

* Add void conditions to QUERY.html (done)

* Rewrite protoimpl. (done)

* Write a communication protocol document. (done)

* Implement the communication protocol. (protoimpl
part). (done)

* Attach the communication protocol everywhere else.
(done)

* resptrans in twalker instead of XMLDResponse_flush. (done)

* Add a basic client authentication support (an authman 
part) with skeleton support for per-file user privileges. 
(done)

* authman_auth_user should return XMLDStatus and inform us about
the curr_dir of the user as well. (done)

* define XMLD*List macros as XMLDList for clearity of code
and use them everywhere. (done)

* Hook authman_get_priv in twalker. (done)

* Add a length argument to xmld_socket_read. (done)

* Handle the authentication sequence in authman_handle. (done)

* Handle DISCONNECT out of the xmld-sql.y (done)

* Add XMLD_ENORPRIV and XMLD_ENOWPRIV errors. (done)

* itostr and ftostr should take a max length parameter 
that if provided as 0 the defaults are used. (done)

* Create a resptrans part that does the job of XMLDR
esponse_flush. and remove XMLDResponse_flush. (done)

* XMLDListList support. (done)

* Support for multi-level retrs and assignments in:
  
  * QUERY.html (done)
  * XMLDExpr (expression grouping and void expression lists -- done)
  * XMLDCond (condition grouping -- done)
  * xmld-sql.(y|lex) (expression and condition grouping and void expression lists -- done)
  * XMLDRow (add num_down and num_up fields -- done)
  * twalker (level-sensitive retr, fill rows wrt num_(up|down), expression grouping (done),
             related levels in WHERE)
  * resptrans (translation of XMLDRow num_up and num_down -- done)
  * cfg (for down_level and up_level and encs -- done)
  * PROTO.html (for additions to init message, up_level before row_sep --  (done))

* Support for the ~ cross-level operation operator:

 * QUERY.html (done)
 * xmld-sql.(lex|y) (done)
 * XMLDExpr and XMLDCond (done)
 * twalker (done)
 * different related levels for WHERE when ~ is used in twalker. (done)
 
* Add "Record sets" to PROTO.html. (done)

* Fix QUERY.html typos. (done)

* Implement read buffering in dutils. (done)

* add down-level up-level to init msg (done)

* Individual expression resolution within twalker. (done)

* Attach NULLs at the end of -sep characters in qp's init
message. (done)

* Implement multiple files support:
 
 * QUERY.html (done)
 * xmld-sql.(y|lex) (add support for expr . expr, use expr 
 instead  of QVAL in <file name> field -- done)
 * XMLDRequest (remove file and use XMLDFileList in XMLDResource
 -- done)
 * XMLDFile (creation -- void* -> filename association, store, level
 -- done)
 * Add XMLDEngine to XMLDFile (per-file engine specification).
 (done)
 * remove XMLDResource, add XMLDFileList in XMLDWork. (done)
 * XMLDResource (remove data_source and store, add XMLDFileList
 instead -- done).
 * XMLDExpr (ident should have a XMLDFile with it -- done)
 * XMLDEngine (walk, get_level should receive XMLDFile* -- done)
 * XMLWork_get_full_file -> XMLDFile_get_full_name (wrt XMLDWork -- done).
 * xmld-sql.y (XMLDResource -> XMLDFileList. -- done)
 * twalker
   * cfg_get_engine, authman_get_priv for each file. (done)
   * XMLDWork_get_full_file -> XMLDFile_get_full_name for each file. (done)
   * if privileges fail for one of the files -> XMLD_E(R|W)PRIV. (done)
   * Implement XMLDFileList_get_max_level. (done)
   * Add a level variable to eval_expr and eval_cond to check if the
   expression/condition's associated file is in the named level. (done)
   * XMLDList_(next|prev)((retr|where)) whensever one of the files reaches
   the next/previous level. (done)
   * prepare and cleanup calls are per-file. (done)
   * prepare and cleanup receive XMLDFile argument. (done)

* remove "proposed" from query, proto. (done)

* remove get_level completely. (done)

* Erase aggregate expression resolution for now.
(done)

* use "[text]" and "[tagname]" instead of "(text)" and
"(tagname)" for less confusion and easier parsing.
(done)

* simplify_expr returns a simplified version of the given 
expression. (done)

* column resolution and NULL file checking goes inside
simplify expr. (done)

* edit eval_expr and eval_cond to follow the changes in
simplify_expr. (done)

* remove support for between and not between statements
for now. (done)

* create a function XMLDExpr_is_complex and call it to
know whether the expression requires simplification.
XMLDExpr_is_complex should handle NULL expressions
normally. (done)

* Engine-XMLD must be rewritten with consideration of:
[1] availablity of column types (done -- within simplify_expr)
[2] access levels. (done -- within prepare)
[3] type and access level enumerations. (done)
[4] the new float type (done)
[5] nval -> back to int. (done)
[7] the major changes in simplify_expr. (done)
[8] Multiple file support and column name -> file association. (done)
[9] format manipulation functions may return NULL or 0. (done)
[11] itostr and ftostr. (done)
[12] tagname/attribute name conflicts. (done)
[13] XMLD*List changes. (done)
[14] Expression grouping. (done)
[15] condition grouping. (done)
[16] hard type checking. (done)
[17] eval_cond should evaluate only the first condition 
of a given condition list. (done)
[18] NULL file name checks. (done)
[19] simplify_expr level checks (ignored if 0). (done)
[20] no aggregate expression support. (done)

* it maybe neccessary to fgetpos-fsetpos at simplify_expr
with identifiers. (done)

* fix engine_xmld_set_column_value radically. (done)

* Use the first file's engine to resolve expressions within 
twalker. (done)

* put the default document root inside the distribution
along with the example files. (done)

* \n is the end-of-line in proto. (done)

* Erase STRCAT and STRLEN from QUERY.html examples, those aren't 
existent in SQL. Add LENGTH and CONCAT instead. (done)

* remove BETWEEN and NOT BETWEEN from conditions, those are special
statements that must not be mixed with normal conditions. (done)

* A make script (done)

* A capability-demonstrating client in src/client. (done)

* compile (done)

* repair includes across all code. (done)

* repair the tooooo many typos across all code (done)

* run (done)

* in somanager. print out each port the OpenXMLD is
listening to under the PID. (done)

* create auth.xml and add a single user to it. (done)

* fix client segfaults. (done)

* fix buffering bugs. (done)

* a make script for the client (done).

* record set parsing and showing in xmldclient. (done)

* handle SIGINT in client and send disconnect to the
server on receiving it. (done)

* check the curr_max_level bug. (done)

* xmldclient should contain a username argument. (done)

* simplify expr may return NULL, eval_expr must check.
(done)

* up-level of zero doesn't show in the response.
(done)

* col_sep and row_sep come before the values and not 
after them. (done)

* why does the server segfault just after serving
up the request. (done -- because XMLDWork_free
tries to free work->files while work->files is
freed on a per request basis -- fixed)

* fix that a second query isn't sent correctly
by the client. (done)

* fix the segfault on twalker error. (done)

* fix format_manip bugs. (done)

* fix dmstrstr confusion bug. (done)

* wrong client layout of recordsets, putting age
into a second row. (done)

* wrong column type identification in simplify_expr.
(done).

* Fix the column -> file association bug. (done)

* Cross level operation operator has no effect.
(done -- XMLDExpr_copy didn't copy the cross_level
field).

* Add the "handling level changes not followed
by row retrieval" thing again. (done)

* modify INSTALL. (done)

* upload QUERY and PROTO to the site, to make sure that all
editions are put online. (done)

--------------- Start of The OpenXMLD 0.6.0 part:

Goal: We want it as clean as something clean and as 
useful as something useful.

--- Foundation:

* Expression tree walking must happen at twalker.
 * xmld_errno must have a default no-error value. (done -- 
 XMLD_ENOERROR)
 * XMLDExpr (define XMLD_SPECIAL_IDENTIFIER because [text]
 and [tagname] may not be the same for other parsers/
 engines -- done)
 * xmld-sql.y (track and fill XMLD_SPECIAL_IDENTIFIER -- done)
 * Take operation, special identifier, wildcard type macros
 out of XMLDExpr and put them in xmld-sql.h because
 they are query parser specific. (done)
 * twalker (Implement twalker_simplify_expr -- done)
  - Notes:
   - lists must be returned without resolution.
   - column names must be put in the ident field after 
   getting their values.
   - in case of error, NULL is returned with setting 
   of xmld_errno to something useful.
   - NULL columns are indiciated by XMLD_QVAL return
   values with NULL values of the qval field.

 * XMLDEngine (Modify according to requirements
 of twalker_simplify_expr) (done)
 * engine_list (Modify according to XMLDEngine changes -- done)
 * XMLDCol (must contain a XMLDExpr field such that
 _is_complex returns XMLD_FALSE -- done).
 * XMLDExpr (Implement XMLDExpr_to_string -- done)
 * XMLDRequest, XMLDExpr and XMLDCond are XMLD-SQL specific
 structures: (done)
  - put request types in xmld_request.h
  - put XMLDExpr macros back into xmld_expr.h
 * Merge XMLDCond and XMLDExpr:
  - XMLDExpr (Put XMLDCond along with its macros and stuff into it -- done)
  - XMLDCond (remove -- done)
  - xmld-sql.(y|lex) (resolve condition rules as expressions -- done)
    - Notes:
     - conditional operators must be left associative. (done)
     - Care about operator priority. (done)
  - twalker_simplify_expr (Merge XMLDCond constructs -- done)
    - Use XMLDExpr_to_boolean in AND, OR, NOT implementations.
  - XMLDExpr_to_string (done)
  - XMLDExpr_to_boolean (done)
 * twalker (call twalker_simplify_expr if is_complex returns
 true):
  - resolve XMLD_LIST recursively. (done -- XMLDExpr_to_columns)
  - conditions are resolved just like expressions. (done)
 * twalker_simplify_expr (if alias is not NULL copy it into ret instead of the 
 real column's  name -- done).
 * resptrans (call XMLDExpr_to_string on each column -- done).
 * Engine-XMLD (Implement the required functions)
   * format documents must have XMLDFile nested inside the primary
     XMLDFile structure. (done)
   * Rewrite format_manip functions inside engine_xmld.c (done)
   * Remove consideration of tag name-specific formatting
     for performance reasons. (done)
   * Add the new format functions to engine_list and XMLDEngine (done)
 * XMLDResponse_fill_col/XMLDCol_fill might need to fill the
 expr and not the string. (done)
 
 
* wisely remove mime checking from prepare for performance (if possible!).
  * Remove the simple check from prepare. (done)
  * Add the is_valid_mime to XMLDEngine. (done)
  * Update engine_list to conform. (done)
  * Implement is_valid_mime in engine_xmld. (done)

* Engine functions should never know about the XMLDWork structure,
  XMLDFile one MUST be enough. (done)

* twalker should respect the changes in engine functions and in
  XMLDCol_fill and XMLDResponse_fill_col.

* If the above gets stabilized, remove unused functions
in Engine-XMLD (done), XMLDResponse [...?].

* Every column must have a name:
  * XMLDExpr_to_string: support operation translation.
  * twalker_simplify_expr: use XMLDExpr_to_string and fill ret->ident.

* The engine must not know about [text] and [tagname].
(Implement separate functions for their retrieval).
 * format_manip (The format document must not use [text] 
 but rather store [text] information in  the place of real 
 element text)

* Implement a sequential column retrieval API in the engine in
order to be able to resolve wildcards correctly. (done)

* Full per-file user privilege system.
 * Real implementation of auth_get_priv.

* Correct required privilege specification.
 * twalker (Remove initial privilege checking)
 * XMLDFile (store the priv of each file inside it)
 * twalker_simplify_expr (Check the privileges of a file 
 to which a column is associated on each operation)

* Response must contain a record set header (update PROTO).

--- Features:

* Aggregate function calls support.

* Create a hash table implementation for places where
search speed is important.

* Shell-like treatment of the forward and backward arrow keys 
in the client.

* A modest number of aggregate and scalar SQL functions.

--- Cleanups:

* ptasker task queue needs maintenance.

* Stabilize recordset levelling confusion.

* values returned from cfg must be checked for being NULLs.

* protect the auth.xml document. (priv it to root only, and make it 
system unreadable).

* Handle quotes inside strings in xmld-sql.lex

* we are using snprintf!

* handle special character decoding in the client.

* Hide the password during input in the client (getch).

* ftostr fills the empty characters of the string
with 0's -- spaces are better.

* "select !:name, age from "file.xml" where !:age=10"
segfaults when called two times and I don't know why.
(as of 0.5.0).

* fix interrupted system call on server side on reciving
of DISCONNECT and correction of a wrong pass.

* Should we have a openxmld user with separate system privileges.

*--------------- Start of the OpenXMLD 0.7.0 part:

Goal: Features with slight fixing.

* Multiple query parsers support and on-the-fly query
parser switching.

* Replace the internal format documents with something
  standard -- DTD or Schema ?
  * Make abstrace APIs for both.

* Check if it's possible to use a list of XMLDExpr * and
XMLDCond* in xmld-sql.y in order to avoid copies.

* Implement CREATE TABLE/FILE (with all the hard
meanings such a word should carry -- requires
expansion of QUERY.html).

* Add the file/engine association document, and mime/engine
association document, and implement cfg functions that
play with them.

* Implement the XMLD_ENOTIMPL things in twalker,
and specify the corresponding engine functions
and implement them in Engine-XMLD.

* Expand QUERY.html and implement it accordingly.

* Implement alphabetical comparsion in str_between.
(check the GNU C Library documentation for "Searching
and Sorting")

*--------------- Start of The OpenXMLD 0.8.0 part:

Goal: Confromance and high-usability.

* Make it a robust XMLD-SQL implementation!

* XML compliance and Unicode support.

* XPATH/XQuery support.

*--------------- Start of The OpenXMLD 1.0.0 part:

Goal: Portability.

* Implement a multi-threaded multi-
tasker (Macro: USE_TTASKER).

* Implement an in-memory parser (libxml2-based, with
caching support)

* Re-implement fmanager using a flock-independent way
once MULTI_THREAD_MTASKER is on.

* Implement a path translator that modifies the path
according to the OS.
