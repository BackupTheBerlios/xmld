*--------------- Start of OpenXMLD 0.7.0 part:

Goal: Cleanliness.

Foundation:
-----------

* The engine interface must be generic, with support for:
  * Multi-levelled data sets. (done)
  * Node labelling (tagnames in XML). (done)  

* Engine capability level specification bitmask. (done)

* Engine access level macros should be generic and simpler. (done)

* Better passage of file names from the tree walker to the engine.
  * XMLDFile can contain an additional field that carries the full
    actual file path from the document root ?  (done)
  * No longer should XMLDFile_get_full_file be needed. (done)

* Addition of data source modification functions to the engine API. (done)
  * Capability bit. (done)

* Data source creation functions.
  * A new access level bit ?
  * Ability to use the engine on an empty XMLDFile.
  * Capability bit.

* Data source alteration (reshaping) functions.
  * Capability bit.

* cfg_parser must be rewritten using bison and flex for
  cleanliness reasons.
  * Write cfg_parser.lex (done).
  * Write cfg_parser.y. (done -- grammer only)
  * XMLDCfgSection (with support for subsections -- done).
  * XMLDDirective refinement. -> (XMLDCfgDirective -- done)
  * XMLDCfgValue (done).
  * Write code for grammar rules. (done)
  * New cfg_parser.c must use cfg_parser.y. (done)
  * Modify cfg_parser.y such that it takes a prepared parse
    tree as input and fills it. (done)
  * Each part should manipulate cfg data structures directly.
    * Reimplement cfg_get that supports a section name and
      a parent section structure arguments (NULL in case of
      cfg_tree). (done -- returns XMLDCfgValueList)
    * Devise an API in cfg that eases retrival of directives
      it just is really hard to do right now.
       * XMLDCfgSection_get_section: (done)
         * The index of the section.
       * XMLDCfgSection_get_directive: (done)
	 * The index of the directive.
       * XMLDCfgDirective should provide a value retrieval function --
         XMLDCfgDirective_get_value, that receives an argument: (done)
	 * The index of the parameter to retrieve (0 for the main value).
    * Modify all parts.
      * ptasker
      * somanager
    * modify initialization of document_root.
    * XMLDList_first and XMLDList_last should return NULL in case of
      receiving NULL as an argument. (done)
    * Write a new sample xmld.conf. (done)
  * Engine association functions should be put in engine list. (done)
  * cfg_parser.(c|h) -> cfg.(c|h) (done)
  * Global configuration variables should remain initialized
    by cfg_init. (done -- only document_root)
  * Erase cfg.c and cfg.h. (done)
  * xmld.conf must not contain types of directives nor 
  somanager.num_listeners. (ok)
  * Support for directive parameters. (ok)
  * # Support for comments in cfg_parser.lex (done)
  * expected bug in cfg.c: The first directive of a set of directives
    that have the same name is the only one we can retrieve.

* Real implementation of interface specification according
  to the configuration file with support for interface parameters.
  * interface_list_init uses cfg to clone the interfaces.
  * Iterative port API in cfg ?

* Support for re-parsing of the configuration on the fly.

* Real implementation of mfigure.

* Real implementation of engine association functions.
  * maybe a clean up of the whole system ?

* Error messages:
  * Try to provide routines of error reporting in engines
    and interfaces.
  * Error numbers relate only to the module in which the
    error occured.
  * Error messages subsystem (gettext ?) such that modules
    (engines/interfaces/whatever) only have to call a core
    function and put their own error messages file somewhere ?

* col_sep, row_sep ... etc are response translator (interface)
  specific, must be wholly removed from protoimpl and somanager.
  Each interface will have a predefined set of rules the client
  knows about.
  
* Usage of autoconf to decide on the modules to be compiled.

* Separate make files for XMLDSQL, Engine-XMLD and ptasker.

Issues:
-------

* Encode user passwords.

* rename XMLDFile.element_pos to XMLDFile.node_pos (done).

* Configuration of the user and the group under which
  OpenXMLD is to run.

*--------------- Start of OpenXMLD 0.8.0 part:

Goal: Strength.

* Portable loadable modules support.

* Support for loading of a module on demand.

* Port-based protocol selection and protocol
  abstraction (?).
  
* cleaner, more portable sockets API.

* Thread-safe core.
  * XMLDList internal iterators are not thread safe.
  * XMLD*List_functions depend on persistence of the internal
    iterator which isn't guaranteed.

* Implement a multi-threaded multi-
tasker (Macro: USE_TTASKER).

* Re-implement fmanager using a flock-independent way
once MULTI_THREAD_MTASKER is on.

* Implement a path translator that modifies the path
according to the OS.
