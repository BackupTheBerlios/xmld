** OpenDaemon 0.8.0:

Goal: API enrichment.

* Erase support for socket passing across processes. (done)

* Framework of dynamic module loading:
  * modman_load_module(type, name) (done)
    * Type: Engine, Processor, Parser ... etc
    * Support for version compaitability checks. (done)
    * Informative error messages in case if any error occurs during 
      module loading.
  * Configuration: (done)
    * modman configuration section.
  * modman_unload_module. (done)

* Parser API.
  * Put the tree walker inside the parser.
  
* Processor API.

* Communicator API ?
  * provide an API that provides for selective and public data passing across 
    separate client connections.

* Connector API?
  * Connection management with respect to the multi-processing model.

* Threads API. (done -- apis/ttasker)
  * Support for thread pools. (done)
  * Put it inside the apis directory. (ok)

* ptasker and ttasker exist side-by-side. (yes)
  * rename mtasker_* to ptasker_*. (done)

* Interface process model. (done)
  * interfaceman instead of interface_list.
    * interfaceman_init: (done)
      * Launches each of the interfaces in a seperate child process. (done)
      * Uses ptasker_handle with _launch (done)
    * _launch:
      * setuid to the configured user of the interface. (done)
      * Tries to load the dynamic module of the interface inside the new process. (done)
      * Run the _interface_init routine inside the new process. (done)
      * Print out _interface_init_msg. (done)
      * if _interface_init_status is SUCCESS: (done)
        * Call _interface_main.	(done)
      * user and conf may be NULL. (yes)
  
* Configuration reparsing happens only in the main process,
  since already launched interfaces will not be restarted.

* Portable Filesystem API.
  * file locking.
  * path translation.
  
* Generalize configuration API. (done)
  * cfg_create_tree (done)
  * cfg_destroy_tree (done)
 
* Generic Communication Protocol:
  * An authenticating version. (authproto)
  * A non-authenticating version. (proto)
  * Or same code with parameters ?

* Authentication rewrite:
  * Configurable authentication domains -- so interfaces will not 
    have to share the same authentication data.
  * Configurable per-domain data storage backend.
    * Ability to specify an internal engine with error 
      messages if it was not loaded.
    * Ability to use an external data source module. (e.g RDBMS)
  * Authentication token encoding.

* ptasker improvements:
  * A thread pool-like API instead of creating a single pool for the whole
    system.
    * Modify ptasker.h (done).
    * Modify ptasker.c to conform. (done)
    * Modify opendaemon.c so it initializes a global process pool. (done)
    * Implement ptasker_kill_me, should there be a _kill_me in ttasker ?
    

* Rename ptasker and ttasker to something more expressing -- wrt the pooling
  mechanism.

* cleaner, more portable sockets API.
  * support for connect().

* Try to create the shelletna website chatserver on top of OpenDaemon:
  * Demonstrate the capabilities of the platform.
  * Fix issues that appear on the way.
  * Add the chatserver's source code as an example interface.

*--------------- OpenDaemon 0.9.0:

Goal: Finalization of Platform.

* On server restart:
  * Main process pool resizing.
    * Add support for this in the thread and the process pool.
  * Launching interfaces newly-added to the configuration.
    * Add support for this in interfaceman.

* Rewrite the file association API.
