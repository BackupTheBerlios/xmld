*--------------- Start of OpenDaemon 0.7.0 part:

Goal: Cleanliness.

Foundation:
-----------

* The engine interface must be generic, with support for:
  * Multi-levelled data sets. (done)
  * Node labelling (tagnames in XML). (done)  

* Engine capability level specification bitmask. (done)

* Engine access level macros should be generic and simpler. (done)

* Better passage of file names from the tree walker to the engine.
  * XMLDFile can contain an additional field that carries the full
    actual file path from the document root ?  (done)
  * No longer should XMLDFile_get_full_file be needed. (done)

* Addition of data source modification functions to the engine API. (done)
  * Capability bit. (done)

* cfg_parser must be rewritten using bison and flex for
  cleanliness reasons.
  * Write cfg_parser.lex (done).
  * Write cfg_parser.y. (done -- grammer only)
  * XMLDCfgSection (with support for subsections -- done).
  * XMLDDirective refinement. -> (XMLDCfgDirective -- done)
  * XMLDCfgValue (done).
  * Write code for grammar rules. (done)
  * New cfg_parser.c must use cfg_parser.y. (done)
  * Modify cfg_parser.y such that it takes a prepared parse
    tree as input and fills it. (done)
  * Each part should manipulate cfg data structures directly.
    * Reimplement cfg_get that supports a section name and
      a parent section structure arguments (NULL in case of
      cfg_tree). (done -- returns XMLDCfgValueList)
    * Devise an API in cfg that eases retrival of directives
      it just is really hard to do right now.
       * XMLDCfgSection_get_section: (done)
         * The index of the section.
       * XMLDCfgSection_get_directive: (done)
	 * The index of the directive.
       * XMLDCfgDirective should provide a value retrieval function --
         XMLDCfgDirective_get_value, that receives an argument: (done)
	 * The index of the parameter to retrieve (0 for the main value).
    * Modify all parts.
      * ptasker (done)
      * somanager (done)
    * modify initialization of document_root. (done)
    * XMLDList_first and XMLDList_last should return NULL in case of
      receiving NULL as an argument. (done)
    * Write a new sample xmld.conf. (done)
  * Engine association functions should be put in engine list. (done)
  * cfg_parser.(c|h) -> cfg.(c|h) (done)
  * Global configuration variables should remain initialized
    by cfg_init. (done -- only document_root)
  * Erase cfg.c and cfg.h. (done)
  * xmld.conf must not contain types of directives nor 
  somanager.num_listeners. (ok)
  * Support for directive parameters. (ok)
  * # Support for comments in cfg_parser.lex (done)
  * expected bug in cfg.c: The first directive of a set of directives
    that have the same name is the only one we can retrieve. (fixed)

* Configuration search functions must return NULL in case the
  index was not correct, and not the last found element! (done)

* Real implementation of interface specification according
  to the configuration file with support for interface parameters.
  * interface_list creates a list according to defines at first.
    (done)
  * XMLDInterface_copy (done)
  * XMLDInteface.init should receive parameters. (done)
  * interface_list_init uses cfg in creation of a second list
    by copying interfaces from the first list and assigns each one 
    to its port and sends it the parameters. (done)
  * XMLDInterface.port (done)
  * XMLDInterface_search_by_port (done)
  * somanager should search for the interface assigned to the
    port from which the user connects. (done)

* Rewrite the generic communication protocol so each interface
  has its own protocol.
  * No longer is authman_handle needed in somanager. (done)
  * somanager_user_connection --> XMLDInterface->user_connection.
    (done).
  * somanager_handle should send only the interface pointer
    to XMLDInterface->user_connection. (done)
  * remove XMLDConnection. (done)

* Fix that somanager passes the interface name through conn.user
  then search for its structure a second time. (done)

* remove client, xmldsql, engine_xmld from the source tree. (done)

* Generic Data Storage API -- to remove database server-specific
  fields from different structures.
   * XMLDAssoc -- Thread-safe associative array implementation:
     * Numeric and String index support. (ok)
     * No internal iterators. (ok)
     * Automatic reusage of already allocated memory segments. (done)
     * Automatic length calculation. (ok)
   * xmld_assoc.h (done)
   * xmld_assoc.c (done)

* Internal XMLDAssoc HashTable. (done)

* sutils hash function. (done)

* XMLDAssocWalker structure
 * Ability to move to a previous / next index. (done)
 * Ability to get the current index's value. (done)

* Replace XMLDList with XMLDAssoc in all the code.
  * Remove list functions. (done)
  * Remove free content. (done)
  * XMLDCfgDirective. (done)
  * XMLDCfgSection. (done)
  * cfg_parser.y (done)
  * engine_list (done)
  * interface_list (done)
  * authman. (done)
  * somanager. (done)
  * XMLDWork (done)
  * XMLDFile (done)
  * Remove xmld_list.c and .h. (done)
  
* For all generic structures, use a signle XMLDAssoc field
  instead of the multiple void* fields.
   * XMLDWork (done)
   * XMLDFile (done)
   * XMLDInterface (done)

* Support for re-parsing of the configuration on the fly.
  * mtasker support function for signaling.
    * mtasker_signal_children. (done)
    * main process handles SIGUSR2 as a configuration update signal
      and calls mtasker_signal_children with SIGUSR2. (done)
  * Child processes should run a cfg function on receiving of signal. (done)
  * cfg_update. (done)
  * somanager, interface_list should be restarted to update the
    listening sockets and the interfaces. (done)

* Erase task table in ptasker, the main process should loop
  until it finds a free child to use. (done)
  
* Erase usage of mutils. (done)

* Real implementation of engine association functions.
  * Why not decide using file name extentions ? (ok)
  * Erase old configuration directives and files. (done) 
  * Configuration should contain the ability to specify
    an engine for a particular extention. (done)
    * Engines section (done)
    * FileType directive (done)
  * Configuration function for getting the engine
    for a particular file type. (done)
    * engine_list_get_engine (done)

* Data source creation functions.
  * Ability to use the engine on an empty XMLDFile. (done)
  * Capability bit. (done)

* Data source alteration (reshaping) functions.
  * Capability bit. (done)
 
* Data source removal functions. (done)
  * Caoability bit. (done)

* Put supplementary APIs in one place:
  * On Disk Data Manipulation API. (dutils) (done)
  * String Manipulation API. (sutils) (done)
  * Authentication API. (authman) (done)
  * File Opening and Locking API. (fmanager) (done)
  * Localized Messages System. (gettext) (delayed)
  
* Implementation of localized messages system. (delayed)

* Error messages:
  * Engine functions: (done)
    * getters: Return NULL or -1 in case of error. 
    * setters: Return XMLD_FALSE in case of error.
    * operationals: Return XMLD_FAILURE in case of error.
  * Error message retrieval engine function. (done)
  * Remove error arrays and defines from xmld.c, init.h and xmlddef.h. (done)
  * How should interfaces handle wrong parameter count / type in xmld.conf ?
    * init should return a XMLDStatus indiciating success / failure. (done)
    * Interface function for getting an error message. (done)

* Remove protoimpl and its documentation. (done)

* Implement an EchoServer interface for demonstration. (done)

* Separate make files for EchoServer and ptasker. (delayed)

* Rename to OpenDaemon.

* Remove old documents from the docs page.

* Drop the XMLD part off all the structure names in the code.
  * It's no longer a XML-only server.
    * XMLDAssoc (done)
    * XMLDAssocWalker (done)
    * XMLDCfgDirective (done)
    * XMLDCfgSection (done)
    * XMLDCfgValue (done)
    * XMLDEngine (done)
    * XMLDFile (done)
    * xmlddef (done)
  * xmld.c -> opendaemon.c (done)
  * xmld.conf -> opendaemon.conf (done)
  * modules' code ? (done)
    * cfg
    * cfg_parser
    * echoserver
    * engine_list
    * interface_list
    * opendaemon.c
    * somanager

* Remove XMLDWork ? (done)
  * Readd if needed

* Take structures to classes directory ? (done)

* Write interface names in the start up port list. (done)

* Test run:
  * Modify make file. (done)
  * Modify includes. (done)
  * Compile. (done)
  * Fix compilation blocking bugs. (done)
  * Run. (done)
  * Fix bugs.
  
Issues:
-------

* rename XMLDFile.element_pos to XMLDFile.node_pos (done).

*--------------- Start of OpenDaemon 0.8.0 part:

Goal: Strength.

* Portable loadable modules support.
  * Support for dependencies.

* Support for loading of a module on demand.

* Processor interface.

* Communicator interface ?
  * To fit chat applications and such ?

* I18n and l10n.

* Usage of autoconf to decide on the modules to be compiled.

* Implement a generic communication protocol that other interface writers can use:
  * With an authentication-based version.
  * A non-authentication-based version.
  
* cleaner, more portable sockets API.

* Thread-safe core.
  * XMLDAssoc semaphore/mutex usage.

* Implement a multi-threaded multi-tasker (Macro: USE_TTASKER).

* Re-implement fmanager using a flock-independent way once MULTI_THREAD_MTASKER is on.

* Implement a path translation API that modifies the path according to the OS.

* Portable way to pass sockets between processes.

Issues:
-------

* Configuration of the user and the group under which
  OpenXMLD is to run.

* authman must encode/decode the user authentication tokens.
