* Implement XMLDList mechanism instead of XMLD*Table for
  each structure. (done)

* Remove XMLDPart and revert the initializer to the old
way -- XMLDPart won't be used out of the initializer.
(done)

* Create an *_init function for each structure that
gets called by the *_create function, such that
a structure obtained in a way different from dynamic
allocation (e.g shared memory) can be initialized
just as a dynamically allocated one. (cancelled)

* Create a generic XMLDTable structure to maintain
static size lists of objects. And modify structures
to use XMLDTable where useful. (done -- and not used)

* Use a XMLDTable of XMLDConnection's in sosel. 
(cancelled)

* Remove xmld_status_t (and errors.h) from every
where and use int (such that 0 = success, -1 = error 
and other numbers mean special return values) instead.
(done)

* Add a name field to XMLDEngine. This should normally
involve creation of a function that searches a list
of XMLDEngine's by name. (done)

* For XMLDEngine, make the engine functions return
short instead of int to indiciate success/failure of
operation in order to use memory more wisely (?).
(done)

* Modify somanager and sosel so it respects the new 
object-oriented foundation and other editions. (done)

* Write a skeleton do-nothing engine, and attach it to
the list of XMLDEngine's which serve the requests.
(done -- Engine-XMLD)

* Check all the code for usage of strlen->malloc->strcpy
must be strlen+1->malloc->strcpy, because strlen doesn't
count the null character. (done)

* Fix usage of cfg in all the parts that currently
use it incorrectly: sosel, somanager, mtasker. (done)

* Use cfg in sosel to determine the timeout period
of select(). (done)

* Use *_engine cfg functions to get the engine
which is to be used with a given file in
fmanager. (done)

* Remove usage of XMLDMemPool from qp, and check
for usage of it in other parts. (done)

* Add a MIME figurer part (mfigure) which det-
rmines the mime type of a given file, and
implements mfigure_get_mime(char *). Integrate
that with cfg_get_engine, such that if an engine
for the given file wasn't found, mfigurer is used
to figure out the mime type of that file, and cfg_
get_engine finally returns the value returned by
cfg_get_mime_engine. (done -- as a skeleton that
always returns "text/xml" (for now!))

* Add a field to XMLDRequest that carries the full
file name + path from the root in order to use it
easily in fmanager (full_file). (cancelled)

* Instead of using full_file and consuming memory
in XMLDRequest, create a function of XMLDWork
-- XMLDWork_get_full_file, which concatenates
curr_dir of XMLDConnection with file of XMLDRequest.
(done)

* Create the engine_list global variable in a sepa
rate module file. (done)

* Replace usage of xmld_types.h every where with
the new structures of the object-oriented foundation,
and check the code for things like struct cond ... 
etc. (done)

* Remove creation arguments and manage code dependency
and fix *_add_to_list().
in:

 - XMLDWork (qp) (done)
 - XMLDResource (fmanager?) (done)
 - XMLDRow (XMLDResponse) (done)
 - XMLDAggrTable (XMLDResponse) (done)

--------- Start of The OpenXMLD 0.4.0 part:

Goal: GET IT RUNNING!

* Implement XMLDResponse_flush which sends the response
contents as string chunks to the fd of the listener
socket, and use it in qp. (done)

* Call XMLDList_free for each XMLDAggrTable in XMLDResponse
once the columns pointed by it are filled. (done)

* Implement xmld_socket_write. (done)

* Implement macro-dependent mtasker switching and put the 
current mtasker in a different directory and call it ptasker,
this should involve #ifdef'ing the include in each place 
where mtasker.h is included, and putting different values 
for it depending on the macro USE_PTASKER, also define the 
macro MULTI_PROC_MTASKER, so it can be used by other parts
to know whether to be multi-process safe (i.e to use shared 
memory segments) or not, and the macro MULTI_THREAD_MTASKER 
to determine whether to be thread safe. (done)

* Remove fmanager, make its tasks be request type specific.
(done)

* Fix twalker to work with the new XMLDResponse. (done)

* Add col_sep, row_sep configuration options, and make them
be persistent in a variable (in cfg.h), thereafter, use
them in XMLDResponse_flush. (done)

* Add "char" type to XMLDDirective, make consideration in
cfg_parser_parse, and in cfg_get. (done)

* sosel should read MULTI_PROC_MTASKER to decide whether
to use a shared memory segment for storing connection
information. (done)

* macros inside mtasker -> ptasker ;-) (done)

* XMLDResponse_flush must be a request type specific thing
(i.e remove it from qp and add it conditionally inside 
twalker) (done)

* Correct usage of XMLDList_last in XMLDResponse_add_col/row. (done)

* Implement XMLDResponse_curr_col/row which returns the current column/row.
(done)

* Rewrite the query parser (xmld-sql.y) to [1] fit the 
new query specification and [2] to respect the object-
oriented foundation. (done)

* Implement ERROR_RESPONSE such that it depends
on a variable (e.g xmld_errno, in file xmld_errors
.h). (done)

* Use ERROR_RESPONSE instead of perror and other
error reporting routines, and make sure that
all the code sets xmld_errno appropriately.
remember to include xmld_sockets.h each time
you include xmld_errors.h. (done)

* Implement Engine-XMLD (done)

* Implement func_list like engine_list.
(done)

* Add the 'store' element to XMLDResou-
rce.
(done)

* short return values that indiciate
success/failure must use 0 for failure
and 1 for success in all the code.
(done)

* In all places where XMLDFunc/XMLDExpr
were used maintain correct dependency 
by defining XMLDFunc before XMLDExpr.
(done)

* In all .h files HAVE_X_X_H -> __X_X_H
since the 'HAVE' thing has another use.
(done)

* Add the func_list part to init. (done)

* Implement dmstrstr, dmstrchr, dmcstrchr,
dmwstrchr.
(in dutils.h). (done)

* XMLDEngine's walk function now returns
the current level and not a status
code, prepare for that everywhere.
(done)

* in QUERY.html, fix the wrong
understanding that an expression
which contains '*' or '@' is an
aggregate one. (done)

* Stream specific functions in
Engine-XMLD should receive only 
an fd, for them to be usable out 
of a resource context. (done)

* Split engine_xmld/engine_xmld.(c|h)
to: (done)

* fmanager_get_read_fd -> *_get_sh_fd, fmanager_
get_write_fd -> *_get_ex_fd. (done)

* Implement fmanager using flock(). (done)

* walk in XMLDEngine must return int. (done)

* Implement element_ops. (done)

* Implement the rest of format_manip. (done)

* XMLDCol_fill shouldn't copy the given string.
(done)

* str_split.(c|h) -> sutils.(c|h) + str_prepend.
(done)

* Remove eval_aggr_expr from everywhere because
it's not needed anymore. (done)

* Implement engine_xmld_eval_cond (done)

* Fix that FILE might be absolute, and
XMLDWork shouldn't concatenate it to
curr_dir in such a case. (done)

* Implement str_like, str_between in sutils. (done)

* Add the AND operator type to expr to handle
between and not between conditionals. (done)

* eval_cond atoi -> atol. (done)

* itoa -> sutils. (done)

* Implement XMLDExpr_copy, XMLDCond_copy. (done)

* Try to compile engine_xmld. (done successfully)

* in XMLDExpr, nval must be long to handle big
numeric values, make consideration for that
every where. (done)

* Add XMLD_ENOAGGR to xmld_errors.h. (done)

* Add types and fields in XMLDRequest 
for INSERT, DELETE, UPDATE and USE 
statements. (done)

* Add all request types to twalker. (done)

* Make consideration of the new types in
Engine-XMLD's fmanager_get_*_fd calls. (done)

* Implement actions for rest of query types in xmld-sql.y (done)

* Fix qp's usage of the query parser. (done)

* In twalker ERROR_RESPONSE for all the not implemented types. (done)

* Add XMLD_ENOTIMPL to xmld_errors.h. (done)

* Respect 'xmld.document_root' configuration directive when
using XMLDWork_get_full_file. In addition cfg_init must
put it in a global variable. (done)

* ptasker/ptasker.h inclusion must include
sys/types.h for pid_t before it. (done)

* In all structures, initialize all memory containers to NULL,
and check within *_free_content before freeing. (done)

* In places where the decision was not to free internal memory
redecide with the new NULL thing above. (I remember XMDWork not
freeing its member structures). (done)

* cfg_parser_parse must ignore the white space at the beginning
of value. (done)

* Fix that cfg_parser won't accept values containing ';'. (done
-- by using end-of-line as an end-of-value indiciator)

* In engine_xmld_set_column_value, a check for availability of the
format file must be done, thereafter either dmwstrchr or dmwnstrchr
may be used. (done)

* Conditionally open the format file (only for request types that
need it). (done)

* Implement xmld_socket_read. (done)

* Compile the whole and fix whatever compilation error meets you.
(done)

* Eat up white space in case of string/integer arrays in cfg_parser.
(done -- and implemented ltrim)

* Fix that str_split includes the delmiter in the output strings.
(done)

* Fix a segfault in str_split because a pointer that's realloced
was not initialized to NULL. (done)

* In XMLDList incrementing, decrementing and relocation of void
pointers must be relative to item_size, that's not automatically
calculated by the compiler. (done)

* Fix that cfg_parser_parse is passing wrong types maybe because
of the end-of-line thing. (done)

* mtasker_handle should return 0 (failure) or
1 (success). (done)

* Implement conditional file descriptor passing in ptasker and
in mtasker_handle (done -- using passfd.c from perl source code).

* Fix mtasker_handle calls-- add the additional fd argument and
make 0 = error and 1 = success. (done)

* mtasker_shutdown -> SIGTERM all children. (done)

* Removal of sosel,every user connection will be handled in an independent context. 
NO MULTIPLEXING ANYMORE! (done)

* Fixed that XMLDFunc_free_content frees name, which is usually a static string.
(done)

* Remove the quotes from a given string in the query parser!!! (done)

* if curr_dir == '/', it must not be concatenated in XMLDWork_get_full
_file. (done)

* XMLDResponse_flush must call xmld_socket_write
only once. (done)

* cfg_parser_parse_token doesn't recognize special characters for the
type char (e.g \t). (done)

* Fix the '@' character that was put in front of a second attribute.
(done)

* Fix that the query parser has generated an error when an attribute
name 'name' was given. (done)

* walk must respect that dmstrstr doesn't respect the longest match.
(done)

* ptasker leaves Zmobies behind, those should make other child
processes afraid and unable to work representing a performance 
bottleneck. (done)

* Handle the possibility that the given WHERE levels might be
less than the actual tree levels in a document. (done -- the
levels in the document greater than where's are ignored)

* Fix that when an element has a NULL value
for an attribute requested in RETR a segfault happens.
(done)

* why does free(full_file) segfault ? (done -- XMLDWork_get
_full_file was too dumb).

* Fix that twalker in case of type 1, advances the condition
level pointer after each call to walk, while it should do that
only if walk goes one level deeper and do the opposite if it
goes one level shallower. (done)

* walk returns 1 for deeper, -1 for shallower and 0 for end
of document. (done)

* get_level engine function. (done)

--------------- Start of The OpenXMLD 0.5.0 part:

Goal: Code base stabilization and preparation for
the hard upcoming features and a slight increase 
in usability.

* If a column value contains col_sep or row_sep they
must be encoded before sending by XMLDResponse_flush.
(done)

* Implement mstrchr_replace. (done)

* cfg_parser must handle # inside values correctly,
that is, # must mean commenting only if it was at 
the beginning of the line. (done)

* somanager must close all server sockets on shutdown.
(done)

* XMLDExpr must contain a floating-point type (e.g double).
Support that in xmld-sql.(lex|y).
(done)

* Implement ftoa/ltoa (sutils.h) -- ltoa -> itoa). (done)

* Convert nval back to int. in xmld-sql.lex, xmld-sql.y
XMLDExpr. (done)

* Remove engine_xmld_get_element_text_length use
att_length with (text) instead. (done)

* Fix implementation of att_length and implement att_type.
in format_manip. (done)

* Share backend in format_manip (done).

* prepare should take one argument that specifies access
levels. (done)

* format manip's load_format_file 's last argument must
be a binary 0 no execlusive to format or 1 execlusive
to format. (done)

* All lists of numeric --> meaning association in all
structures/functions must be converted to correspon-
ding enumerations/macros. (done)

* The access level given to prepare must be defined
as macros of three bits OR'ing them gives a proper
result. (done)

* consider the macro and enumeration thing in xmld-sql.y
and twalker. (done)

* Implement bitutils.h (done)

* Add XMLD_ENOFORMAT to xmld_errors.(h/c). (done)

* All success/failure -> back to int (XMLD_SUCCESS
 and XMLD_FAILURE). (done)

* XMLDDirective now has type macros change cfg_parser
to conform. (done)

* xmld-sql.y must have its own request types defined
as macros (done)

* twalker must respect xmld-sql.y macros. (done)

* twalker prepare calls must use the access level 
bitmask. (done)

* engine_xmld_prepare doesn't use BIT_ISSET correctly
(done)

* in cfg_parser convert mode to macros (done)

* format_manip's load_format_file must return a pointer
to the opened file rather than a status indiciator
and NULL in case of failure (fix prepare to conform).
(done)

* define XMLD_TRUE, XMLD_FALSE, XMLDBool type, 
XMLD_SUCCESS, XMLD_FAILURE, XMLD_SPECIAL and 
BIT_ISSET and take all to xmlddef.h. (done)

* move contents of xmld_errors -> xmlddef (done)

* #include bitutils.h and xmld_errors.h -> 
#include xmlddef. (done)

* Use global XMLD_* macros everywhere. (done)

* If the level in question given to one of 
format_manip functions is higher than the actual
levels in the format document, the last level
must be considered infinite. Add that a level
is represented by a "<level>" element in the
format document. (done)

* The format document must support a <!>
tagname format in each level, that is -- if
no corresponding tagname was found, default
is used. (done)

* engine_xmld_get_element_att_format when
returns NULL other format manip should
return 0 or NULL as well, higher level
functions must produce an XMLD_EMALFORMAT
error. (done)

* Add void conditions to QUERY.html (done)

* Rewrite protoimpl. (done)

* Write a communication protocol document. (done)

* Implement the communication protocol. (protoimpl
part). (done)

* Attach the communication protocol everywhere else.
(done)

* resptrans in twalker instead of XMLDResponse_flush. (done)

* Add a basic client authentication support (an authman 
part) with skeleton support for per-file user privileges. 
(done)

* authman_auth_user should return XMLDStatus and inform us about
the curr_dir of the user as well. (done)

* define XMLD*List macros as XMLDList for clearity of code
and use them everywhere. (done)

* Hook authman_get_priv in twalker. (done)

* Add a length argument to xmld_socket_read. (done)

* Handle the authentication sequence in authman_handle. (done)

* Handle DISCONNECT out of the xmld-sql.y (done)

* Add XMLD_ENORPRIV and XMLD_ENOWPRIV errors. (done)

* itostr and ftostr should take a max length parameter 
that if provided as 0 the defaults are used. (done)

* Create a resptrans part that does the job of XMLDR
esponse_flush. and remove XMLDResponse_flush. (done)

* XMLDListList support. (done)

* Support for multi-level retrs and assignments in:
  
  * QUERY.html (done)
  * XMLDExpr (expression grouping and void expression lists -- done)
  * XMLDCond (condition grouping -- done)
  * xmld-sql.(y|lex) (expression and condition grouping and void expression lists -- done)
  * XMLDRow (add num_down and num_up fields -- done)
  * twalker (level-sensitive retr, fill rows wrt num_(up|down), expression grouping (done),
             related levels in WHERE)
  * resptrans (translation of XMLDRow num_up and num_down -- done)
  * cfg (for down_level and up_level and encs -- done)
  * PROTO.html (for additions to init message, up_level before row_sep --  (done))

* Support for the ~ cross-level operation operator:

 * QUERY.html (done)
 * xmld-sql.(lex|y) (done)
 * XMLDExpr and XMLDCond (done)
 * twalker (done)
 * different related levels for WHERE when ~ is used in twalker. (done)
 
* Add "Record sets" to PROTO.html. (done)

* Fix QUERY.html typos. (done)

* Implement read buffering in dutils. (done)

* add down-level up-level to init msg (done)

* Individual expression resolution within twalker. (done)

* Attach NULLs at the end of -sep characters in qp's init
message. (done)

* Implement multiple files support:
 
 * QUERY.html (done)
 * xmld-sql.(y|lex) (add support for expr . expr, use expr 
 instead  of QVAL in <file name> field -- done)
 * XMLDRequest (remove file and use XMLDFileList in XMLDResource
 -- done)
 * XMLDFile (creation -- void* -> filename association, store, level
 -- done)
 * Add XMLDEngine to XMLDFile (per-file engine specification).
 (done)
 * remove XMLDResource, add XMLDFileList in XMLDWork. (done)
 * XMLDResource (remove data_source and store, add XMLDFileList
 instead -- done).
 * XMLDExpr (ident should have a XMLDFile with it -- done)
 * XMLDEngine (walk, get_level should receive XMLDFile* -- done)
 * XMLWork_get_full_file -> XMLDFile_get_full_name (wrt XMLDWork -- done).
 * xmld-sql.y (XMLDResource -> XMLDFileList. -- done)
 * twalker
   * cfg_get_engine, authman_get_priv for each file. (done)
   * XMLDWork_get_full_file -> XMLDFile_get_full_name for each file. (done)
   * if privileges fail for one of the files -> XMLD_E(R|W)PRIV. (done)
   * Implement XMLDFileList_get_max_level. (done)
   * Add a level variable to eval_expr and eval_cond to check if the
   expression/condition's associated file is in the named level. (done)
   * XMLDList_(next|prev)((retr|where)) whensever one of the files reaches
   the next/previous level. (done)
   * prepare and cleanup calls are per-file. (done)
   * prepare and cleanup receive XMLDFile argument. (done)

* remove "proposed" from query, proto. (done)

* remove get_level completely. (done)

* Erase aggregate expression resolution for now.
(done)

* use "[text]" and "[tagname]" instead of "(text)" and
"(tagname)" for less confusion and easier parsing.
(done)

* simplify_expr returns a simplified version of the given 
expression. (done)

* column resolution and NULL file checking goes inside
simplify expr. (done)

* edit eval_expr and eval_cond to follow the changes in
simplify_expr. (done)

* remove support for between and not between statements
for now. (done)

* create a function XMLDExpr_is_complex and call it to
know whether the expression requires simplification.
XMLDExpr_is_complex should handle NULL expressions
normally. (done)

* Engine-XMLD must be rewritten with consideration of:
[1] availablity of column types (done -- within simplify_expr)
[2] access levels. (done -- within prepare)
[3] type and access level enumerations. (done)
[4] the new float type (done)
[5] nval -> back to int. (done)
[7] the major changes in simplify_expr. (done)
[8] Multiple file support and column name -> file association. (done)
[9] format manipulation functions may return NULL or 0. (done)
[11] itostr and ftostr. (done)
[12] tagname/attribute name conflicts. (done)
[13] XMLD*List changes. (done)
[14] Expression grouping. (done)
[15] condition grouping. (done)
[16] hard type checking. (done)
[17] eval_cond should evaluate only the first condition 
of a given condition list. (done)
[18] NULL file name checks. (done)
[19] simplify_expr level checks (ignored if 0). (done)
[20] no aggregate expression support. (done)

* it maybe neccessary to fgetpos-fsetpos at simplify_expr
with identifiers. (done)

* fix engine_xmld_set_column_value radically. (done)

* Use the first file's engine to resolve expressions within 
twalker. (done)

* put the default document root inside the distribution
along with the example files. (done)

* \n is the end-of-line in proto. (done)

* Erase STRCAT and STRLEN from QUERY.html examples, those aren't 
existent in SQL. Add LENGTH and CONCAT instead. (done)

* remove BETWEEN and NOT BETWEEN from conditions, those are special
statements that must not be mixed with normal conditions. (done)

* A make script (done)

* A capability-demonstrating client in src/client. (done)

* compile (done)

* repair includes across all code. (done)

* repair the tooooo many typos across all code (done)

* run (done)

* in somanager. print out each port the OpenXMLD is
listening to under the PID. (done)

* create auth.xml and add a single user to it. (done)

* fix client segfaults. (done)

* fix buffering bugs. (done)

* a make script for the client (done).

* record set parsing and showing in xmldclient. (done)

* handle SIGINT in client and send disconnect to the
server on receiving it. (done)

* check the curr_max_level bug. (done)

* xmldclient should contain a username argument. (done)

* simplify expr may return NULL, eval_expr must check.
(done)

* up-level of zero doesn't show in the response.
(done)

* col_sep and row_sep come before the values and not 
after them. (done)

* why does the server segfault just after serving
up the request. (done -- because XMLDWork_free
tries to free work->files while work->files is
freed on a per request basis -- fixed)

* fix that a second query isn't sent correctly
by the client. (done)

* fix the segfault on twalker error. (done)

* fix format_manip bugs. (done)

* fix dmstrstr confusion bug. (done)

* wrong client layout of recordsets, putting age
into a second row. (done)

* wrong column type identification in simplify_expr.
(done).

* Fix the column -> file association bug. (done)

* Cross level operation operator has no effect.
(done -- XMLDExpr_copy didn't copy the cross_level
field).

* Add the "handling level changes not followed
by row retrieval" thing again. (done)

* modify INSTALL. (done)

* upload QUERY and PROTO to the site, to make sure that all
editions are put online. (done)

--------------- Start of The OpenXMLD 0.6.0 part:

Goal: We want it as clean as something clean and as 
useful as something useful.

--- Foundation:

* Expression tree walking must happen out of the engine.
 * xmld_errno must have a default no-error value.
 * XMLDExpr (Implement XMLDExpr_simplify)
  * Notes:
   * lists must be returned as is.
   * column names must be put in the ident after getting 
   their values.
   * in case of error, NULL is returned with setting 
   of xmld_errno to something useful.
   * to distinguish between NULL columns and error
   conditions clear xmld_errno.
 * XMLDEngine (Modify according to requirements
 of XMLDExpr_simplify)
 * engine_list (Modify according to XMLDEngine changes)
 * XMLDResponse (Implement XMLDResponse_fill)
 * twalker (twalker_handle must only call 
 XMLDResponse_fill for each expression to be retr
 ieved)

* If the above gets stabilized, remove unused functions
in Engine-XMLD, XMLDResponse [...?].

* The engine must not know about [text] and [tagname].
(Implement separate functions for their retrieval).

* Implement a sequential column retrieval API in the engine in
order to be able to resolve wildcards correctly.

* Response must contain a record set header (update PROTO).

* ptasker task queue needs maintenance.

* fix recordset levelling confusion.

--- Features:

* Aggregate function calls support.

* Create a hash table implementation for places where
search speed is important.

* Full per-file user privilege system.
 * Real implementation of auth_get_priv.

* Correct required privilege specification.
 * twalker (Remove initial privilege checking)
 * XMLDFile (store the priv of each file inside it)
 * XMLDExpr_simplify (Check the privileges of a file 
 to which a column is associated on each operation)

* Shell-like treatment of the forward and backward arrow keys 
in the client.

* A modest number of aggregate and scalar SQL functions.

--- Cleanups:

* values returned from cfg must be checked for being NULLs.

* protect the auth.xml document. (priv it to root only, and make it 
system unreadable).

* Handle quotes inside strings in xmld-sql.lex

* we are using snprintf!

* handle special character decoding in the client.

* Hide the password during input in the client (getch).

* ftostr fills the empty characters of the string
with 0's -- spaces are better.

* "select !:name, age from "file.xml" where !:age=10"
segfaults when called two times and I don't know why.
(as of 0.5.0).

* fix interrupted system call on server side on reciving
of DISCONNECT and correction of a wrong pass.

*--------------- Start of the OpenXMLD 0.7.0 part:

Goal: Features with slight fixing.

* Multiple query parsers support and on-the-fly query
parser switching.

* Check if it's possible to use a list of XMLDExpr * and
XMLDCond* in xmld-sql.y in order to avoid copies.

* Implement CREATE TABLE/FILE (with all the hard
meanings such a word should carry -- requires
expansion of QUERY.html).

* Add the file/engine association document, and mime/engine
association document, and implement cfg functions that
play with them.

* Implement the XMLD_ENOTIMPL things in twalker,
and specify the corresponding engine functions
and implement them in Engine-XMLD.

* Expand QUERY.html and implement it accordingly.

* Implement alphabetical comparsion in str_between.
(check the GNU C Library documentation for "Searching
and Sorting")

*--------------- Start of The OpenXMLD 0.8.0 part:

Goal: Confromance and high-usability.

* Make it a robust XMLD-SQL implementation!

* XML compliance and Unicode support.

* XPATH/XQuery support.

*--------------- Start of The OpenXMLD 1.0.0 part:

Goal: Portability.

* Implement a multi-threaded multi-
tasker (Macro: USE_TTASKER).

* Implement an in-memory parser (libxml2-based, with
caching support)

* Re-implement fmanager using a flock-independent way
once MULTI_THREAD_MTASKER is on.

* Implement a path translator that modifies the path
according to the OS.
