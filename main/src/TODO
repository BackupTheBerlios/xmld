*--------------- Start of OpenXMLD 0.7.0 part:

Goal: Cleanliness.

Foundation:
-----------

* The engine interface must be generic, with support for:
  * Multi-levelled data sets. (done)
  * Node labelling (tagnames in XML). (done)  

* Engine capability level specification bitmask. (done)

* Engine access level macros should be generic and simpler. (done)

* Better passage of file names from the tree walker to the engine.
  * XMLDFile can contain an additional field that carries the full
    actual file path from the document root ?  (done)
  * No longer should XMLDFile_get_full file be needed. (done)

* Addition of data source modification functions to the engine API. (done)
  * Capability bit. (done)

* Data source creation functions.
  * A new access level bit ?
  * Ability to use the engine on an empty XMLDFile.
  * Capability bit.

* Data source alteration (reshaping) functions.
  * Capability bit.

* cfg_parser must be rewritten using bison and flex for
  cleanliness reasons.
  * Write cfg_parser.lex (done).
  * Write cfg_parser.y.
  * XMLDCfgTree (with support for subtrees for sections).
  * XMLDDirective refinement.
  * New cfg_parser.c API.
  * Modify cfg.c accrodingly.
  * xmld.conf must not contain types of directives nor 
  somanager.num_listeners.
  * Support for interface parameters.

* Real implementation of interface specification according
  to the configuration file with support for interface parameters.
  * interface_list_init uses cfg to clone the interfaces.
  * Iterative port API in cfg ?

* Real implementation of mfigure.

* Real implementation of engine configuration functions.

* Usage of autoconf to decide the modules to be compiled.

* Separate make files for XMLDSQL, Engine-XMLD and ptasker.

Issues:
-------

* Encode user passwords.

* rename XMLDFile.element_pos to XMLDFile.node_pos (done).

* Configuration of the user and the group under which
  OpenXMLD is to run.

*--------------- Start of OpenXMLD 0.8.0 part:

Goal: Portability.

* Thread-safe core.

* Implement a multi-threaded multi-
tasker (Macro: USE_TTASKER).

* Re-implement fmanager using a flock-independent way
once MULTI_THREAD_MTASKER is on.

* Implement a path translator that modifies the path
according to the OS.
