* Implement XMLDList mechanism instead of XMLD*Table for
  each structure. (done)

* Remove XMLDPart and revert the initializer to the old
way -- XMLDPart won't be used out of the initializer.
(done)

* Create an *_init function for each structure that
gets called by the *_create function, such that
a structure obtained in a way different from dynamic
allocation (e.g shared memory) can be initialized
just as a dynamically allocated one. (cancelled)

* Create a generic XMLDTable structure to maintain
static size lists of objects. And modify structures
to use XMLDTable where useful. (done -- and not used)

* Use a XMLDTable of XMLDConnection's in sosel. 
(cancelled)

* Remove xmld_status_t (and errors.h) from every
where and use int (such that 0 = success, -1 = error 
and other numbers mean special return values) instead.

* Create a hash table implementation for places where
search speed is important (XMLDHashTable), and provide
APIs in XMLDEngine and XMLDFunc (...?) in that form:

XMLDEngine_create_hashtable(...)
XMLDEngine_add_to_hashtable(...)
XMLDEngine_search_hashtable(...)

* Rewrite the query parser (xmld-sql.y) to [1] fit the 
new query specification and [2] to respect the object-
oriented foundation.

* Add a name field to XMLDEngine. This should normally
involve creation of a function that searches a list
of XMLDEngine's by name. (done)

* Write a skeleton do-nothing engine, and attach it to
the list of XMLDEngine's which serve the requests.
